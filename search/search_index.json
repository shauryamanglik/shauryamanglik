{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"#shaurya-manglik","title":"Shaurya Manglik","text":"<p>Team 309A</p> <p>EGR 314: Prof. Nichols</p> <p>Temperature Sensor Subsystem</p>"},{"location":"#links-to-pages","title":"Links to Pages","text":"<p>Block Diagram</p> <p>Component Selection</p> <p>Schematic &amp; PCB</p> <p>Bill of Materials</p> <p>API</p> <p>Resources</p>"},{"location":"#team-website","title":"Team Website","text":"<p>Click Here</p>"},{"location":"#team-members","title":"Team Members","text":"<p>Aadish Lele</p> <p>Shaurya Manglik</p>"},{"location":"API/","title":"Application Programming Interface (API)","text":""},{"location":"API/#overview","title":"Overview","text":"<p>This document defines how Shaurya's subsystem communicates using UART-based messaging in the updated Team 309A project. It uses a simplified 2-person communication model between Shaurya (Sensor) and Aadish (Motor Driver).</p>"},{"location":"API/#user-id-assignments","title":"User ID Assignments","text":"User User ID Shaurya 0xFC Aadish 0xFD"},{"location":"API/#message-structure","title":"Message Structure","text":"Byte # Field Name Data Type Description 1\u20132 Prefix uint16_t Message start identifier 3 Sender ID uint8_t Identifies sender 4 Receiver ID uint8_t Identifies recipient 5\u20136 Data uint16_t Message-specific data 7\u20138 Suffix uint16_t Message end identifier"},{"location":"API/#message-types","title":"Message Types","text":""},{"location":"API/#type-1-motor-direction-command-sent-from-shaurya-to-aadish","title":"Type 1 \u2013 Motor Direction Command (Sent from Shaurya to Aadish)","text":"Condition Message ID Meaning Temp \u2264 25\u00b0C 0x01 Motor Forward 25\u00b0C \\&lt; Temp \u2264 30\u00b0C 0x02 Motor Reverse Temp &gt; 30\u00b0C 0x03 Motor Off"},{"location":"API/#type-2-acknowledgment-sent-from-aadish-to-shaurya","title":"Type 2 \u2013 Acknowledgment (Sent from Aadish to Shaurya)","text":"Message ID Meaning 0x01 Motor Forward Confirmation \u2013 Blink RB0 0x02 Motor Reverse Confirmation \u2013 Blink RB4 0x03 Motor Off Confirmation \u2013 Blink RB0 &amp; RB4"},{"location":"API/#serial-message-format","title":"Serial Message Format","text":"Field Example (Motor Forward) Prefix FS Sender ID S Receiver ID A Data 01 (Forward) Suffix FS"},{"location":"API/#mplab-x-code-xc8-uart-handler","title":"MPLAB X Code (XC8 UART Handler)","text":"<pre><code>\\#include \"mcc\\_generated\\_files/system/system.h\"\n\n\\#define AHT21\\_ADDR 0x38\n\nvoid send\\_uart\\_message(const char\\* msg) {\n\n    for (uint8\\_t i \\= 0; i \\&lt; 8; i++) {\n\n        while (\\!EUSART1\\_IsTxReady());\n\n        EUSART1\\_Write(msg\\[i\\]);\n\n    }\n\n}\n\nvoid blink\\_led(uint8\\_t cmd) {\n\n    if (cmd \\== '1') LATBbits.LATB0 \\= 1;\n\n    if (cmd \\== '2') LATBbits.LATB4 \\= 1;\n\n    if (cmd \\== '3') { LATBbits.LATB0 \\= 1; LATBbits.LATB4 \\= 1; }\n\n    \\_\\_delay\\_ms(200);\n\n    LATBbits.LATB0 \\= 0;\n\n    LATBbits.LATB4 \\= 0;\n\n}\n\nint main(void)\n\n{\n\n    SYSTEM\\_Initialize();\n\n    INTERRUPT\\_GlobalInterruptEnable();\n\n    INTERRUPT\\_PeripheralInterruptEnable();\n\n    ANSELBbits.ANSELB0 \\= 0;  // Make sure RB0 is digital\n\n    ANSELBbits.ANSELB4 \\= 0;  // Make sure RB4 is digital\n\n    TRISBbits.TRISB0 \\= 0;    // Set RB0 as output\n\n    TRISBbits.TRISB4 \\= 0;    // Set RB4 as output\n\n    LATBbits.LATB0 \\= 0;      // Ensure RB0 starts LOW\n\n    LATBbits.LATB4 \\= 0;      // Ensure RB4 starts LOW\n\n    uint8\\_t cmd\\[3\\] \\= {0xAC, 0x33, 0x00};\n\n    uint8\\_t data\\[6\\];\n\n    char rx\\_buf\\[8\\] \\= {0};\n\n    while (1)\n\n    {\n\n        // Send measurement trigger\n\n        I2C1\\_Write(AHT21\\_ADDR, cmd, 3);\n\n        \\_\\_delay\\_ms(80);\n\n        // Read data\n\n        if (I2C1\\_Read(AHT21\\_ADDR, data, 6\\) &amp;&amp; \\!(data\\[0\\] &amp; 0x80))\n\n        {\n\n            uint32\\_t raw\\_temp \\= ((uint32\\_t)(data\\[3\\] &amp; 0x0F) \\&lt;\\&lt; 16\\) | ((uint32\\_t)data\\[4\\] \\&lt;\\&lt; 8\\) | data\\[5\\];\n\n            float temperature \\= ((float)raw\\_temp / 1048576.0f) \\* 200.0f \\- 50.0f;\n\n            printf(\"Temperature: %.2f C\\\\r\\\\n\", temperature);  // ? Added line\n\n            char command \\= '3'; // Default to off\n\n            if (temperature \\&lt;= 25\\) command \\= '1'; // Forward\n\n            else if (temperature \\&lt;= 30\\) command \\= '2'; // Reverse\n\n            char msg\\[8\\] \\= { 'F', 'S', 'S', 'A', '0', command, 'F', 'S' };\n\n            send\\_uart\\_message(msg);\n\n        }\n\n        // Check for UART confirmation from A\n\n        if (EUSART1\\_IsRxReady()) {\n\n            char byte \\= EUSART1\\_Read();\n\n            for (uint8\\_t i \\= 0; i \\&lt; 7; i++) rx\\_buf\\[i\\] \\= rx\\_buf\\[i \\+ 1\\];\n\n            rx\\_buf\\[7\\] \\= byte;\n\n            if (rx\\_buf\\[0\\] \\== 'F' &amp;&amp; rx\\_buf\\[1\\] \\== 'S' &amp;&amp;\n\n                rx\\_buf\\[2\\] \\== 'A' &amp;&amp; rx\\_buf\\[3\\] \\== 'S' &amp;&amp;\n\n                rx\\_buf\\[4\\] \\== '0' &amp;&amp; rx\\_buf\\[6\\] \\== 'F' &amp;&amp; rx\\_buf\\[7\\] \\== 'S') {\n\n                blink\\_led(rx\\_buf\\[5\\]);\n\n            }\n\n        }\n\n        \\_\\_delay\\_ms(1000);\n\n    }\n\n}\n</code></pre>"},{"location":"API/#summary","title":"Summary","text":"<p>Shaurya's subsystem uses the AHT21 sensor to read temperature. Based on the reading: - If \u2264 25\u00b0C, it sends command 01 (motor forward) - If between 25\u00b0C and 30\u00b0C, it sends command 02 (motor reverse) - If &gt; 30\u00b0C, it sends command 03 (motor off) The command is sent to Aadish's subsystem using the message format FSSA0xFS. Upon executing the command, Aadish responds using FSAS0xFS. When Shaurya receives this response: - '01' makes Shaurya blink RB0 LED - '02' blinks RB4 LED - '03' blinks both RB0 and RB4 for 200 ms</p>"},{"location":"Bill%20of%20Materials/","title":"Bill of Materials","text":"Bill of Materials Part Name/Description Unit Quantity Unit Prototype Cost Total Prototype Cost Manufacturer Manufacturer Part # Vendor Link Datasheet Link Supplier Supplier Part # # Ordered Date Ordered # Received Surplus Schematic Reference Designators CL21 Series 0805 100nF 50V \u00b110% Tolerance X7R Multilayer Ceramic Chip Capacitor 5 $0.01 $0.05 Samsung CL21B104KBCNNNC https://www.mouser.com/ProductDetail/Samsung-Electro-Mechanics/CL21B104KBCNNNC?qs=349EhDEZ59pEfpnm5yBEmQ%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/585/MLCC-1837944.pdf Mouser 187-CL21B104KBCNNNC 100 04/17/2025 100 95 C4, C5 Cap Ceramic 10uF 10V X5R \u00b120% Pad SMD 0603 +85\u00b0C T/R 1 $0.04 $0.04 Samsung CL10A106MP8NNNC https://www.mouser.com/ProductDetail/Samsung-Electro-Mechanics/CL10A106MP8NNNC?qs=X6jEic%2FHinAgjcVTZfg7UA%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/585/MLCC-1837944.pdf PRLTA 109 187-CL10A106MP8NNNC 20 04/17/2025 20 19 C7 Multi-Layer Ceramic Capacitor 22uF 6.3V X5R \u00b120% 0603 Paper T/R 2 $0.17 $0.33 Murata GRT188R60J226ME3D https://www.mouser.com/ProductDetail/Murata-Electronics/GRT188R60J226ME13D?qs=5aG0NVq1C4wtE7eg0bKClQ%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/281/1/GRT188R60J226ME13_01A-3158709.pdf Mouser 81-GRT188R60J226ME3D 10 04/17/2025 10 8 C8, C9 LED BLUE CLEAR CHIP SMD 2 $1.97 $3.94 Kingbright APT1608QBC/D https://www.mouser.com/ProductDetail/Kingbright/APT1608QBC-D?qs=f499HRGa1RntVOgIsJz2RQ%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/216/APT1608QBC_D-65281.pdf Mouser 604-APT1608QBC/D 5 04/17/2025 5 3 D1, D2 FUSE BLOCK CARTRIDGE PCB 1 $0.00 $0.00 Peralta N/A N/A N/A Peralta G20243 2 04/17/2025 2 1 F1 CONN PWR JACK 2X5.5MM SOLDER 1 $0.65 $0.65 Same Sky PJ-102A https://www.digikey.com/en/products/detail/same-sky-formerly-cui-devices/PJ-102A/275425 https://www.sameskydevices.com/product/resource/pj-102a.pdf Digikey CP-102A-ND 5 04/17/2025 5 4 J1 Multilayer Type Inductor for Power Lines for Automotive, 0805 (2012), 4.7\u03bcH, 30%, 0.288\u03a9, 0.8A 1 $0.28 $0.28 Murata LQM21PZ4R7NGRD https://www.mouser.com/ProductDetail/Murata-Electronics/LQM21PZ4R7NGRD?qs=70cth9uAySe9Hjscy6wmlw%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/281/1/JELF243B_9114-3139897.pdf Mouser 81-LQM21PZ4R7NGRD 10 04/17/2025 10 9 L1 RES SMD 10K OHM 1% 1/2W 0805 2 $0.08 $0.17 Panasonic ERJ-P06F1002V https://www.digikey.com/en/products/detail/panasonic-electronic-components/ERJ-P06F1002V/3982406 https://industrial.panasonic.com/cdbs/www-data/pdf/RDO0000/AOA0000C331.pdf Digikey P16059TR-ND 10 04/17/2025 10 8 R3, R6 RES SMD 4.7K OHM 1% 1/4W 0805 2 $0.08 $0.16 Panasonic ERJ-8ENF4701V https://www.digikey.com/en/products/detail/panasonic-electronic-components/ERJ-8ENF4701V/1746047?s=N4IgTCBcDaIKICUBSAOOA5AYgFgOwAYBGANRAF0BfIA https://industrial.panasonic.com/cdbs/www-data/pdf/RDA0000/AOA0000C304.pdf Digikey P4.70KFTR-ND 10 04/17/2025 10 8 R4, R5 RES SMD 100 OHM 1% 1/8W 0805 3 $0.05 $0.16 Panasonic ERJ-6ENF1000V https://www.digikey.com/en/products/detail/panasonic-electronic-components/ERJ-6ENF1000V/111089?s=N4IgTCBcDaIKYCcBWBaAbHAdgMwIwAZCA3EAXQF8g https://industrial.panasonic.com/cdbs/www-data/pdf/RDA0000/AOA0000C304.pdf Digikey P100CTR-ND 10 04/17/2025 10 7 R7, R8, R9 SWITCH TACTILE SPST-NO 0.05A 12V 1 $0.98 $0.98 Omron B3U-1000P https://www.digikey.com/en/products/detail/omron-electronics-inc-emc-div/B3U-1000P/1534338 https://omronfs.omron.com/en_US/ecb/products/pdf/en-b3u.pdf Digikey SW1020TR-ND 4 04/17/2025 4 3 S1 Headers 15 $0.00 $0.00 Peralta N/A N/A N/A Peralta N/A 20 04/17/2025 20 5 T PIC18F27Q10T-I/ML 8-bit PIC MCU, 128 KB, 3615 Bytes, 64 MHz, 1.8 to 5.5V, QFN-28, RoHS 1 $1.47 $1.47 Microchip PIC18F27Q10T-I/ML https://www.digikey.com/en/products/detail/microchip-technology/PIC18F27Q10T-I-ML/10187781?s=N4IgTCBcDaIAoEkDCBGAHAMTAdgIooAYAVAWgQHoBZAGRAF0BfIA https://ww1.microchip.com/downloads/en/DeviceDoc/PIC18F27-47Q10-Data-Sheet-40002043E.pdf Digikey PIC18F27Q10T-I/MLTR-ND 4 04/17/2025 4 3 U1 IC REG BUCK 3.3V 2A TSOT26 1 $1.38 $1.38 Diodes Incorporated AP63203WU-7 https://www.mouser.com/ProductDetail/Diodes-Incorporated/AP63203WU-7?qs=u16ybLDytRZ1JqxbuLkMJw%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/115/DIOD_S_A0007089856_1-2542907.pdf Mouser 621-AP63203WU-7 5 04/17/2025 5 4 U2 Tiny Serial Digital Thermal Sensor, 5-Pin SOT-23, Extended Temperature, Tape and Reel 1 $1.15 $1.15 Microchip TC74A4-3.3VCTTR https://www.mouser.com/ProductDetail/Microchip-Technology/TC74A4-3.3VCTTR?qs=RnzODY3cU8tPGH6ABAhZ0Q%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/268/21462D-3441647.pdf Mouser 579-TC74A4-3.3VCTTR 4 04/17/2025 4 3 U3 AHT21 1 $3.35 $3.35 HiLetgo AHT21 https://www.amazon.com/dp/B09KGW1G41?ref=ppx_yo2ov_dt_b_fed_asin_title https://robu.in/wp-content/uploads/2021/11/1151995_AHT21-Humidity-and-Temperature-Sensor-ASAIR-V1.0.03.pdf Amazon AHT21 2 04/17/2026 2 1 U3"},{"location":"Block%20Diagram/","title":"Block Diagram","text":""},{"location":"Block%20Diagram/#temperature-sensor-subsystem","title":"Temperature Sensor Subsystem","text":"<p>Download PDF</p>"},{"location":"Block%20Diagram/#block-diagram-decision-making-process-alignment-with-product-requirements-individual-subsystem","title":"Block Diagram \u2013 Decision-Making Process &amp; Alignment with Product Requirements (Individual Subsystem)","text":"<p>The design of this block diagram began with identifying the key responsibilities of my subsystem within the broader Team 309A project: to measure temperature, determine the appropriate motor behavior (forward, reverse, or off), and communicate that decision to the motor driver subsystem via UART. Additionally, my system needed to respond to confirmation messages from the actuator and reflect motor status using on-board LEDs.</p> <p>To accomplish this, I selected the PIC18F27Q10 microcontroller, which supports both I\u00b2C and UART protocols. It interfaces with the AHT21 temperature sensor over I\u00b2C to read real-time ambient temperature data. I\u00b2C was chosen due to its simple two-wire communication, low pin usage, and native compatibility with both components. UART is used to send formatted motor control messages to the actuator subsystem and receive acknowledgments in return.</p> <p>The AP63203WU-7 voltage regulator was used to provide a stable 3.3V power rail to both the sensor and MCU, ensuring compatibility with low-power digital components.</p> <p>GPIO pins (specifically RB0 and RB4) are used to control LEDs that blink to indicate motor direction (forward, reverse, off) based on acknowledgment messages received over UART. This visual feedback ensures that even without external debugging tools, the user can verify communication and action execution.</p> <p>This modular, clearly segmented block diagram reflects not only the subsystem\u2019s function but also how it aligns with our product requirement to:</p> <ul> <li> <p>React to environmental input (temperature).</p> </li> <li> <p>Control another subsystem (motor) via logical thresholds.</p> </li> <li> <p>Confirm actions visually for debugging and usability.</p> </li> </ul> <p>By simplifying the architecture to use just one microcontroller, sensor, and UART interface, the system maintains low complexity while fulfilling its defined role effectively.</p>"},{"location":"Component%20Selection/","title":"Component Selection","text":"<p>1. Microcontroller</p> Option Component Pros Cons 1. <p>PIC18F27Q10T-I/ML</p><p></p><p></p><p>Price: $1.47/unit</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: Microchip Technology</p> <p>- High-Performance 8-bit MCU \u2013 Optimized for real-time control applications.</p><p>- Multiple Communication Interfaces \u2013 Supports SPI, I\u00b2C, and UART, useful for interfacing with a temperature sensor.</p><p>- Low Power Consumption \u2013 Ideal for battery-operated systems.</p><p>- Configurable Logic &amp; Peripherals \u2013 Reduces the need for external components.</p><p>- Analog Features \u2013 Includes ADC and comparators, useful for sensor integration.</p> <p>- Limited Processing Power \u2013 As an 8-bit MCU, it may struggle with heavy computations.</p><p>- No Floating-Point Unit \u2013 Could make complex math operations slower.</p><p>- Limited RAM (3.8 KB) \u2013 Might be restrictive for data-heavy applications.</p><p>- Through-Hole Package (DIP-28) \u2013 Good for prototyping, but may not be ideal for compact designs.</p> 2. <p>PIC18F46Q71-I/P</p><p></p><p></p><p></p><p></p><p>Price: $2.43/unit</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: Microchip Technology</p> <p>- More Processing Power \u2013 8-bit MCU but with a higher feature set than standard PIC18s.</p><p>- Dedicated Math Accelerator \u2013 Helps with DSP-like operations, useful for sensor fusion.</p><p>- Multiple Communication Interfaces \u2013 SPI, I\u00b2C, and UART for seamless temperature sensor integration.</p><p>- Advanced Analog Features \u2013 12-bit ADC, op-amps, and DAC, improving sensor signal handling.</p><p>- Extended Temperature Range \u2013 Good for industrial applications.</p> <p>- Larger Package (DIP-40) \u2013 Takes up more PCB space, which may not be ideal for compact designs.</p><p>- Still 8-bit \u2013 Might be limiting for high-speed or complex real-time processing.</p><p>- No Floating-Point Support \u2013 Can slow down complex calculations.</p> <p>I chose the PIC18F27Q10 because it provides the necessary communication interfaces (SPI, I\u00b2C, UART) for temperature sensor data collection, has low power consumption, and includes configurable peripherals that simplify integration. Additionally, it was already available in class, making it a more convenient and cost-effective choice.</p> <p>2. Sensor</p> Option Component Pros Cons 1. AHT21Price: $3.35/unitLink: Click HereMfr: HiLetgo <p>- High Accuracy \u2013 \u00b10.3\u00b0C temperature accuracy and \u00b12% RH humidity accuracy.</p><p>- I\u00b2C Interface \u2013 Easy integration with microcontrollers using a standard two-wire protocol.</p><p>- Wide Voltage Range \u2013 Operates from 2.2V to 5.5V, making it suitable for various systems.</p><p>- Compact Design \u2013 Small form factor allows integration in tight spaces.</p><p>- Factory Calibrated \u2013 Eliminates the need for user calibration.</p><p>- Fast Response Time \u2013 Quickly reacts to environmental changes.</p><p>- \u00b7  Low Power Consumption \u2013 Ideal for battery-powered devices.</p> <p>- Not Waterproof \u2013 Requires additional protection in humid/wet environments.</p><p>- Limited Temperature Range \u2013 Operates between -40\u00b0C to 85\u00b0C, which may not suit all industrial applications.</p><p>- No Built-in Heating Element \u2013 Can lead to condensation in high-humidity use cases.</p><p>- Less Common Than DHT Series \u2013 Slightly fewer learning resources and community examples compared to DHT11/DHT22.</p> 2. <p>A3G4250DTR</p><p></p><p></p><p></p><p>Price: $15.66/unit</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: STMicroelectronics</p> <p>- 3.3V Operation \u2013 Directly compatible with desired power supply.</p><p>- I\u00b2C &amp; SPI Support \u2013 Flexible communication options.</p><p>- High-Resolution (16-bit output) \u2013 Provides precise angular rate data.</p><p>- Low Power Consumption \u2013 Suitable for battery-operated applications.</p><p>- Embedded Low-Pass Filter \u2013 Helps reduce noise in measurements.</p> <p>- No Accelerometer or Magnetometer \u2013 Only provides gyroscope data.</p><p>- Limited Community Support \u2013 Fewer MicroPython libraries available.</p><p>- Fixed Full-Scale Range (\u00b1245 dps) \u2013 Not adjustable for higher-speed motion tracking</p> 3. <p>ICM-20948</p><p></p><p></p><p></p><p>Price: $7.11/unit</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: TDK InvenSense</p> <p>- 9-DOF Sensor: Includes a 3-axis gyroscope, 3-axis accelerometer, and 3-axis magnetometer for comprehensive motion sensing.</p><p>- Low Power Consumption: Optimized for battery-powered applications.</p><p>- I2C &amp; SPI Support: Provides flexibility in communication options.</p><p>- Built-in DMP (Digital Motion Processor): Offloads sensor fusion and calculations from the microcontroller.</p><p>- High Sensitivity: Precise motion tracking with \u00b12000 dps gyroscope, \u00b116g accelerometer, and \u00b14900\u00b5T magnetometer.</p><p>- Small Form Factor: Suitable for compact embedded systems.</p> <p>- Complex Configuration: Requires multiple initialization steps and careful register management.</p><p>- Limited 3.3V Compatibility: Needs level shifting if interfacing with 5V microcontrollers.</p><p>- Magnetometer Requires Extra Handling: Uses an AK09916 chip internally, requiring separate I2C communication.</p><p>- Higher Cost: More expensive than simpler IMUs like the MPU6500.</p><p>- Limited Library Support in MicroPython: Might require custom driver development for full functionality.</p> <p>I chose the AHT21 temperature and humidity sensor because it aligned most closely with the core functionality of our project\u2014a temperature-controlled spinning top. Unlike other sensors, such as the A3G4250DTR or LM35, which either focus on isolated motion sensing or provide only analog outputs, the AHT21 delivers precise digital temperature readings via I\u00b2C, making integration with our PIC-based system simple and reliable. Its 3.3V compatibility, factory calibration, and compact design made it ideal for our embedded application. Since our project is directly influenced by ambient temperature readings, the AHT21 was the most appropriate and relevant choice.</p> <p>3. Voltage Regulator</p> Option Component Pros Cons 1. <p>LM2675MX-3.3/NOPB</p><p></p><p></p><p>Price: $4.36/unit</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: Texas Instruments</p> <p>- Switching Regulator (Buck Converter) \u2013 Higher efficiency than linear regulators.</p><p>- 3.3V Fixed Output \u2013 No need for external voltage adjustment.</p><p>- Wide Input Voltage Range (6.5V\u201340V) \u2013 Compatible with a 9V battery.</p><p>- High Efficiency (~90%) \u2013 Reduces heat and extends battery life.</p><p>- 500mA Output Current \u2013 Sufficient for low-power microcontroller systems.</p><p>- Built-in Thermal Shutdown and Current Limiting \u2013 Protects against overheating and overcurrent.</p> <p>- Requires External Inductor and Capacitors \u2013 More complex circuit design.</p><p>- Larger Footprint than AMS1117 \u2013 Takes up more PCB space.</p><p>- More Expensive than Linear Regulators \u2013 Higher cost per unit. </p> 2. <p>AP63203WU-7</p><p>Price: $1.47/unitLink: Click HereDatasheetMfr: Diodes Incorp.</p> <p>- Automotive-Grade (AEC-Q100 Qualified) \u2013 Reliable for automotive and industrial applications.</p><p>- Wide Input Voltage Range (4V - 36V) \u2013 Works with various power sources, including automotive and battery systems.</p><p>- High Efficiency (~90%) \u2013 Reduces power loss and heat generation.</p><p>- 1A Output Current \u2013 Suitable for moderate power applications.</p><p>- Fixed 3.3V Output Version \u2013 No need for external resistors to set voltage.</p><p>- Compact SOT-23-6 Package \u2013 Saves board space.</p><p>- Integrated High-Side MOSFET \u2013 Simplifies design by reducing external components.</p><p>- Low Quiescent Current (~75\u00b5A) \u2013 Ideal for battery-powered applications.</p> <p>- SOT-23-6 Package \u2013 Can be difficult to solder for beginners.</p><p>- Limited Output Current (1A Max) \u2013 May not be sufficient for high-power loads.</p><p>- Fixed Output Voltage (3.3V) \u2013 Not adjustable, requiring a separate variant for different voltages.</p><p>- External Inductor and Capacitors Required \u2013 Must carefully select external components for stability.</p> 3. <p>AMS1117-3.3</p><p></p><p>Price: $0.68/unit</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: UMW</p> <p>\u25cf    Low Dropout Voltage: Requires only 1.1V difference between input and output, making it efficient for regulating 9V down to 3.3V.</p><p>\u25cf    3.3V Fixed Output: Perfect for powering low-voltage microcontrollers and sensors like the PIC18F27Q10 and MPU6500.</p><p>\u25cf  Simple Design: Only requires a few capacitors for stability.</p><p>\u25cf    Compact Size: Available in SOT-223 package, ideal for PCB designs.</p><p>\u25cf  Affordable &amp; Widely Available: Low-cost voltage regulation solution.</p> <p>- Low Current Output: Maximum 800mA, which may be insufficient for power-hungry peripherals.</p><p>- Linear Regulator Efficiency: Wastes excess energy as heat, especially when stepping down from 9V to 3.3V.</p><p>- Requires Heat Dissipation: Can overheat if powering multiple components without a heatsink.</p><p>- Not the Best for Battery-Powered Applications: Inefficient compared to switching regulators (buck converters).</p> <p>The AP63203WU-7 was chosen over the others because it is simpler to implement, requires fewer external components, and is more compact and cost-effective for the system\u2019s power needs. While it has lower efficiency, heat dissipation is manageable given the system\u2019s power requirements.</p> <p>4. Power Supply</p> Option Component Pros Cons 1. <p>B0B248DSFG</p><p></p><p></p><p>Price: $11.98</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: LCLEBM</p> <p>- 9V, 1500mAh Capacity \u2013 Provides decent runtime for low-power applications.</p><p>- Rechargeable Li-ion Chemistry \u2013 Reduces waste and long-term costs.</p><p>- Built-in Protection Circuit \u2013 Prevents overcharging, over-discharging, and short circuits.</p><p>- Compact Size \u2013 Fits standard 9V battery holders.</p> <p>- Actual Capacity May Be Lower Than Advertised \u2013 Some 9V Li-ion batteries have lower true capacity.</p><p>- Voltage Drops Under Load \u2013 May affect performance in high-current applications.</p><p>- Requires a Compatible Charger \u2013 Cannot be charged with a standard NiMH or alkaline charger.</p> 2. <p>3046-9V-ND</p><p></p><p>Price: $4.46/unit</p><p>Link: Click Here</p><p>Datasheet</p><p>Mfr: Duracell</p> <p>- Reliable Duracell Brand \u2013 Known for consistent quality and performance.</p><p>- Alkaline Chemistry \u2013 Provides stable voltage for moderate-power applications.</p><p>- No Recharge Required \u2013 Convenient for one-time use scenarios.</p><p>- Long Shelf Life \u2013 Retains charge well when stored.</p> <p>- Non-Rechargeable \u2013 Increases long-term cost and waste.</p><p>- Lower Capacity Than Li-ion \u2013 Drains faster under high loads.</p><p>- Voltage Drops Over Time \u2013 Performance degrades as the battery discharges.</p> <p>The B0B248DSFG (9V Li-ion) was chosen over the Duracell 9V (alkaline) because it is rechargeable, offers a higher capacity, and maintains a more stable voltage under load, making it more cost-effective and efficient for long-term use in the system.</p> <p>Microcontroller Selection:</p> <p>1. Determine Project-Specific Requirements</p> <ul> <li>Communication Protocols:</li> <li>I2C: Used for lower-speed sensors (AHT21 uses I2C).</li> <li>UART: Might be needed for debugging or interfacing with other systems.</li> <li>Pin Requirements:</li> <li>Power &amp; Ground: At least 2 pins.</li> <li>Programming: 1 pin for ICSP (for the PIC).</li> <li>GPIO: Additional for controlling/resetting components.</li> <li>Communication: I2C (SCL, SDA), SPI (MISO, MOSI, SCK, SS), and possibly UART.</li> </ul> <p>2. Researching the PIC18F27Q10 Microcontroller</p> Feature PIC18F27Q10 Pins 28 I2C 2 modules SPI 2 modules UART 2 modules GPIO 25 (shared with other functions) Operating Voltage 3.3V or 5V Flash Memory 128 KB RAM 8 KB EEPROM 1 KB Clock Speed 64 MHz <ul> <li>Meets Requirements:</li> <li>Supports I2C (needed for AHT21)</li> <li>Has enough GPIOs for additional connections</li> <li>Multiple communication protocols (SPI, UART, etc.)</li> <li>Exceeds Requirements:</li> <li>Extra memory and processing power beyond the immediate need.</li> <li>Does Not Meet Requirements:</li> <li>No built-in WiFi/Bluetooth (handled by the ESP32 on another team member\u2019s end).</li> </ul> <p>3. Checking for Compatibility Issues:</p> <ul> <li>The AHT21 temperature sensor is commonly used with the PIC18F27Q10, but Microchip libraries and drivers should be verified.</li> <li>Check if Microchip's I2C library supports AHT21 well.</li> <li>Look for existing libraries for interfacing the AHT21 with PIC (Microchip Harmony, MPLAB Code Configurator, etc.).</li> <li>Ensure no known I2C clock stretching issues with PIC.</li> </ul> <p>4. Role Description</p> <p>As part of Team 309, the responsibility is to interface the AHT21 temperature sensor with the PIC18F27Q10 to measure the rotation speed of the spinning top's motor. This data will then be transmitted to another team member\u2019s ESP32, which will handle further communication with the human interface module for visualization.</p> <p>Key Responsibilities:</p> <ul> <li>Sensing: Capturing rotational data via AHT21 (I2C).</li> <li>Processing: Sending processed data from PIC18F27Q10 to ESP32.</li> <li>Power Management: Ensuring compatibility with 3.3V power supply.</li> <li>Communication: Handling I2C communication between the PIC and AHT21.</li> </ul> <p>PIC Table</p> ESP Info Answer Model PIC18F27Q10T-I/ML Product Page URL Microchip Product Page Datasheet URL(s) Datasheet Application Notes URL(s) Application Notes Vendor link DigiKey Code Examples Microchip GitHub External Resources URL(s) YouTube Unit cost $1.47 Absolute Maximum Current for entire IC 250mA Supply Voltage Range 2.3V (Min) / 3.3V or 5V (Nominal) / 5.5V (Max) Absolute Maximum Current (for entire IC) 250mA Maximum GPIO current (per pin) 25mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL None Works with MPLabX? Yes Works with Microchip Code Configurator? Yes <p>Available Modules &amp; Pin Assignments</p> Module # Available Needed Associated Pins (or * for any) GPIO 25 4 * ADC 11 0 N/A UART 2 1 TX, RX SPI 2 1 SCK, MISO, MOSI, SS I2C 2 1 SDA, SCL PWM 7 0 N/A ICSP 1 1 PGD, PGC, MCLR <p>Power Supply &amp; Voltage Regulation Considerations:</p> <ul> <li>9V battery \u2192 AP63203WU-7 (Regulates down to 3.3V for PIC &amp; AHT21)</li> <li>AP63203WU-7 Connections:</li> <li>Vin \u2192 9V Battery</li> <li>Vout \u2192 PIC18F27Q10 (VDD) &amp; AHT21 (VCC)</li> <li>GND \u2192 Common ground</li> </ul> <p>Peripheral Breakdown:</p> <ul> <li>AHT21 Temperature Sensor (I2C Interface)</li> <li>SCL \u2192 RC3 (Pin 18)</li> <li>SDA \u2192 RC4 (Pin 23)</li> <li>VCC \u2192 3.3V (From AP63203WU-7)</li> <li>GND \u2192 Common Ground</li> <li>INT (Optional) \u2192 Assign to an available GPIO if needed</li> <li>Voltage Regulator (AP63203WU-7)</li> <li>Vin \u2192 9V Battery</li> <li>Vout \u2192 3.3V for PIC &amp; AHT21</li> <li>GND \u2192 Common Ground</li> </ul> <p>MPLABX MCC Screenshot:</p> <p></p> <p></p> <p>Temperature Sensor Comparison</p> <p>The AHT21 and TC74A4-3.3VCTTR were evaluated as potential temperature sensors for this project. The AHT21 was chosen due to its superior precision and I2C compatibility.</p> <p>\u2022 AHT21 (Selected) - Pros: High accuracy (\u00b10.3\u00b0C), digital I2C interface, compact, low power - Cons: Slightly more expensive than TC74, needs initialization sequence</p> <p>\u2022 TC74A4-3.3VCTTR (Alternate) - Pros: Very low cost, simple I2C interface - Cons: Lower precision (\u00b12\u00b0C typical), slower response</p> <p>Power Budget</p> <p>The following power budget outlines the estimated current consumption of each electrical component used in the Team 309A temperature-controlled spinning top system. All components are powered at 3.3V, regulated by the AP63203WU-7 buck converter.</p> Component Voltage (V) Current (mA) Power (mW) AHT21 Temperature Sensor 3.3 1.0 3.3 PIC18F27Q10 Microcontroller 3.3 2.4 7.9 LEDs (2x) 3.3 10.0 33.0 <p>Total Estimated Current Draw: 13.4 mA</p> <p>Total Estimated Power Consumption: 44.2 mW</p> <p>Summary Table of Final Major Components</p> Component Type Part Number Description Communication Justification Microcontroller PIC18F27Q10 8-bit MCU, 3.3V, multiple UART/I\u00b2C/SPI I\u00b2C, UART Central processing and control of subsystems Temperature Sensor AHT21 Temp &amp; humidity sensor I\u00b2C Core to temperature-based control functionality Voltage Regulator AP63203WU-7 3.3V 2A buck converter N/A Efficient conversion from higher input voltages Power Supply B0B248DSFG External Li-ion power bank N/A Supplies raw 5V to voltage regulator <p>MCC Configuration / Pinout Table</p> Peripheral Pin(s) Used Description I\u00b2C (Sensor Comm) RC3 (SCL), RC4 (SDA) Communicates with AHT21 temperature sensor UART (Messaging) RC6 (TX), RC7 (RX) Sends/receives 8-byte messages over UART GPIO (LEDs) RB0, RB4 Blinks to indicate motor direction confirmation <p>Component Selection Rationale</p> <p>We began component selection by identifying our project's core functionality: controlling a motor's spin based on sensed temperature. This led us to prioritize communication-friendly, efficient, and low-power components.</p> <ul> <li>AHT21 was chosen as our primary sensor because it directly matched our product requirement: sensing ambient temperature to trigger motor action. It communicates over I\u00b2C, is reliable, small, and cost-effective.</li> <li>PIC18F27Q10 was selected for its UART and I\u00b2C support, 3.3V compatibility, and ease of integration through MCC. It offered just the right balance of peripherals for a system of this scale.</li> <li>AP63203WU-7 replaced the earlier voltage regulator due to its compact size, excellent efficiency, and compatibility with 9V input from the B0B248DSFG USB power supply.</li> <li>The DC motor was externally driven, but its direction was set through SPI commands from the PIC. Feedback was received via UART and visually confirmed with LED blinks on the Sensor board.</li> </ul> <p>Our decisions were backed by datasheet reviews, current draw estimates, size constraints, and integration complexity. Each s</p> <p>elected component directly supports the product's technical and experiential requirements.</p> <p>Power Budget Discussion</p> <p>We created a power budget using estimated current consumption from datasheets. The goal was to validate that all components could run continuously without brownouts or heat issues.</p> Component Quantity Voltage (V) Current (mA each) Total Current (mA) PIC18F27Q10 1 3.3 5 5 AHT21 Sensor 1 3.3 0.8 0.8 LEDs (2) 2 3.3 5 10 Total \u2014 \u2014 \u2014 17.8 mA <p>The AP63203WU-7 regulator supports up to 2A, which is vastly more than our sensor-side system needs (~18 mA). The power budget gave us confidence that we didn\u2019t need extra regulation or thermal dissipation measures for this board. It also confirmed our component choices were highly efficient, contributing to a safe and low-power system.</p> <p>Feedback Addressed: Based on feedback received during design reviews, we replaced the earlier LMR50410Y3FQDBVRQ1 voltage regulator with the AP63203WU-7, which offers improved reliability, better transient response, and higher current capability, making it more suitable for our application</p>"},{"location":"Individual%20Schematic%20%26%20PCB/","title":"Individual Schematic & PCB","text":"<p>Individual Schematic</p> <p></p> <p>PCB Design</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Schematic ZIP File</p> <p>Schematic PDF File</p> <p>Gerber Files</p> <p>Project Code for Testing:</p> <p>Test Code ZIP File</p> <p>Bill of Materials</p> Bill of Materials Part Name/Description Unit Quantity Unit Prototype Cost Total Prototype Cost Manufacturer Manufacturer Part # Vendor Link Datasheet Link Supplier Supplier Part # # Ordered Date Ordered # Received Surplus Schematic Reference Designators CL21 Series 0805 100nF 50V \u00b110% Tolerance X7R Multilayer Ceramic Chip Capacitor 5 $0.01 $0.05 Samsung CL21B104KBCNNNC https://www.mouser.com/ProductDetail/Samsung-Electro-Mechanics/CL21B104KBCNNNC?qs=349EhDEZ59pEfpnm5yBEmQ%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/585/MLCC-1837944.pdf Mouser 187-CL21B104KBCNNNC 100 04/17/2025 100 95 C4, C5 Cap Ceramic 10uF 10V X5R \u00b120% Pad SMD 0603 +85\u00b0C T/R 1 $0.04 $0.04 Samsung CL10A106MP8NNNC https://www.mouser.com/ProductDetail/Samsung-Electro-Mechanics/CL10A106MP8NNNC?qs=X6jEic%2FHinAgjcVTZfg7UA%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/585/MLCC-1837944.pdf PRLTA 109 187-CL10A106MP8NNNC 20 04/17/2025 20 19 C7 Multi-Layer Ceramic Capacitor 22uF 6.3V X5R \u00b120% 0603 Paper T/R 2 $0.17 $0.33 Murata GRT188R60J226ME3D https://www.mouser.com/ProductDetail/Murata-Electronics/GRT188R60J226ME13D?qs=5aG0NVq1C4wtE7eg0bKClQ%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/281/1/GRT188R60J226ME13_01A-3158709.pdf Mouser 81-GRT188R60J226ME3D 10 04/17/2025 10 8 C8, C9 LED BLUE CLEAR CHIP SMD 2 $1.97 $3.94 Kingbright APT1608QBC/D https://www.mouser.com/ProductDetail/Kingbright/APT1608QBC-D?qs=f499HRGa1RntVOgIsJz2RQ%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/216/APT1608QBC_D-65281.pdf Mouser 604-APT1608QBC/D 5 04/17/2025 5 3 D1, D2 FUSE BLOCK CARTRIDGE PCB 1 $0.00 $0.00 Peralta N/A N/A N/A Peralta G20243 2 04/17/2025 2 1 F1 CONN PWR JACK 2X5.5MM SOLDER 1 $0.65 $0.65 Same Sky PJ-102A https://www.digikey.com/en/products/detail/same-sky-formerly-cui-devices/PJ-102A/275425 https://www.sameskydevices.com/product/resource/pj-102a.pdf Digikey CP-102A-ND 5 04/17/2025 5 4 J1 Multilayer Type Inductor for Power Lines for Automotive, 0805 (2012), 4.7\u03bcH, 30%, 0.288\u03a9, 0.8A 1 $0.28 $0.28 Murata LQM21PZ4R7NGRD https://www.mouser.com/ProductDetail/Murata-Electronics/LQM21PZ4R7NGRD?qs=70cth9uAySe9Hjscy6wmlw%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/281/1/JELF243B_9114-3139897.pdf Mouser 81-LQM21PZ4R7NGRD 10 04/17/2025 10 9 L1 RES SMD 10K OHM 1% 1/2W 0805 2 $0.08 $0.17 Panasonic ERJ-P06F1002V https://www.digikey.com/en/products/detail/panasonic-electronic-components/ERJ-P06F1002V/3982406 https://industrial.panasonic.com/cdbs/www-data/pdf/RDO0000/AOA0000C331.pdf Digikey P16059TR-ND 10 04/17/2025 10 8 R3, R6 RES SMD 4.7K OHM 1% 1/4W 0805 2 $0.08 $0.16 Panasonic ERJ-8ENF4701V https://www.digikey.com/en/products/detail/panasonic-electronic-components/ERJ-8ENF4701V/1746047?s=N4IgTCBcDaIKICUBSAOOA5AYgFgOwAYBGANRAF0BfIA https://industrial.panasonic.com/cdbs/www-data/pdf/RDA0000/AOA0000C304.pdf Digikey P4.70KFTR-ND 10 04/17/2025 10 8 R4, R5 RES SMD 100 OHM 1% 1/8W 0805 3 $0.05 $0.16 Panasonic ERJ-6ENF1000V https://www.digikey.com/en/products/detail/panasonic-electronic-components/ERJ-6ENF1000V/111089?s=N4IgTCBcDaIKYCcBWBaAbHAdgMwIwAZCA3EAXQF8g https://industrial.panasonic.com/cdbs/www-data/pdf/RDA0000/AOA0000C304.pdf Digikey P100CTR-ND 10 04/17/2025 10 7 R7, R8, R9 SWITCH TACTILE SPST-NO 0.05A 12V 1 $0.98 $0.98 Omron B3U-1000P https://www.digikey.com/en/products/detail/omron-electronics-inc-emc-div/B3U-1000P/1534338 https://omronfs.omron.com/en_US/ecb/products/pdf/en-b3u.pdf Digikey SW1020TR-ND 4 04/17/2025 4 3 S1 Headers 15 $0.00 $0.00 Peralta N/A N/A N/A Peralta N/A 20 04/17/2025 20 5 T PIC18F27Q10T-I/ML 8-bit PIC MCU, 128 KB, 3615 Bytes, 64 MHz, 1.8 to 5.5V, QFN-28, RoHS 1 $1.47 $1.47 Microchip PIC18F27Q10T-I/ML https://www.digikey.com/en/products/detail/microchip-technology/PIC18F27Q10T-I-ML/10187781?s=N4IgTCBcDaIAoEkDCBGAHAMTAdgIooAYAVAWgQHoBZAGRAF0BfIA https://ww1.microchip.com/downloads/en/DeviceDoc/PIC18F27-47Q10-Data-Sheet-40002043E.pdf Digikey PIC18F27Q10T-I/MLTR-ND 4 04/17/2025 4 3 U1 IC REG BUCK 3.3V 2A TSOT26 1 $1.38 $1.38 Diodes Incorporated AP63203WU-7 https://www.mouser.com/ProductDetail/Diodes-Incorporated/AP63203WU-7?qs=u16ybLDytRZ1JqxbuLkMJw%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/115/DIOD_S_A0007089856_1-2542907.pdf Mouser 621-AP63203WU-7 5 04/17/2025 5 4 U2 Tiny Serial Digital Thermal Sensor, 5-Pin SOT-23, Extended Temperature, Tape and Reel 1 $1.15 $1.15 Microchip TC74A4-3.3VCTTR https://www.mouser.com/ProductDetail/Microchip-Technology/TC74A4-3.3VCTTR?qs=RnzODY3cU8tPGH6ABAhZ0Q%3D%3D\\&amp;countryCode=US\\&amp;currencyCode=USD https://www.mouser.com/datasheet/2/268/21462D-3441647.pdf Mouser 579-TC74A4-3.3VCTTR 4 04/17/2025 4 3 U3 AHT21 1 $3.35 $3.35 HiLetgo AHT21 https://www.amazon.com/dp/B09KGW1G41?ref=ppx_yo2ov_dt_b_fed_asin_title https://robu.in/wp-content/uploads/2021/11/1151995_AHT21-Humidity-and-Temperature-Sensor-ASAIR-V1.0.03.pdf Amazon AHT21 2 04/17/2026 2 1 U3 <p>PCB Photo</p> <p></p> <p>Functional Justification</p> <p>The schematic is built around the PIC18F27Q10 microcontroller, which interfaces with the AHT21 temperature sensor using I2C protocol. Based on the temperature reading, the MCU sends a command over UART to the motor driver subsystem to either spin forward, reverse, or stop. The command sent follows an 8-byte UART message format (e.g., FSSA01FS), representing forward, reverse, or off. The actuator module (A) responds with a confirmation (e.g., FSAS01FS), which triggers LED feedback in the sensor module (S). This complete loop of sensing, acting, confirming, and responding fulfills the product requirement of real-time feedback and responsiveness.</p> <p>Design &amp; Decision Making Process</p> <p>Our team ideated on interactive and educational applications, eventually selecting a temperature-controlled spinning top. The design was broken into two subsystems: sensing and actuation. The sensor subsystem housed the AHT21 and handled temperature logic, while the driver subsystem received UART messages and spun the motor accordingly. We emphasized modularity for debugging and reused tested driver components like the IFX9201. We made the PCB compact, tested communication protocols in software, and iterated the UART messaging for consistent data transfer.</p> <p>Future Version 2.0 Improvements</p> <ol> <li> <p>Integrated PCB (Single-Board Design): Version 1.0 used two separate PCBs for sensing and motor control, which increased wiring complexity and introduced instability during spinning. A single PCB integrating the sensor, motor driver, and MCU would reduce size, improve balance, and simplify the system.</p> </li> <li> <p>Onboard Power &amp; Battery Support: Currently reliant on external power, the system could benefit from an onboard buck converter and a LiPo battery interface. This would make the top portable and suitable for demonstrations or classroom use without cables.</p> </li> <li> <p>Compact Motor Integration: Replacing the bulky external motor with a mini brushless DC motor (BLDC) or embedded vibration motor would allow the entire spinning mechanism to be part of the board itself, improving balance and reducing moving parts.</p> </li> <li> <p>Visual Feedback via RGB LED or Display: Adding a color-coded LED or a small OLED screen can provide real-time feedback for motor direction or temperature values, enhancing usability and educational appeal.</p> </li> <li> <p>Enhanced Communication Robustness: The current UART protocol lacks error detection. Adding a checksum or timeout mechanism would prevent miscommunication and ensure safer, more reliable behavior.</p> </li> <li> <p>Sensor Upgrade: Replacing the AHT21 with a combined motion and temperature sensor (like MPU6050 or BMX160) could enable orientation-aware behavior, such as dynamic motor control or spin stability features.</p> </li> <li> <p>Final Shell for Safety &amp; Appearance: A 3D-printed shell could house all electronics, protect the motor, and balance the weight for smoother spins. It would also make the device more durable and child-friendly for STEM outreach.</p> </li> </ol> <p>Together, these improvements would elevate the project from a working prototype to a robust, user-friendly, and educationally impactful product.</p>"},{"location":"Resources/","title":"Resources","text":"<p>Project File MPLABX Project File</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}